{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\giada\\\\OneDrive\\\\Desktop\\\\progetto finale\\\\frontend\\\\src\\\\components\\\\contactList\\\\ContactList.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { faUser } from \"@fortawesome/free-solid-svg-icons\";\nimport ButtonChat from \"./ButtonChat\";\nimport \"./contactList.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ContactList({\n  loggedUser,\n  handler,\n  up,\n  reload\n}) {\n  _s();\n  const user = document.cookie.split(\"; \").find(row => row.startsWith(\"token\")).split(\"=\")[1];\n  const [names, setNames] = useState([]);\n\n  /* Si ottengono tutti i nominativi degli utenti presenti nelle messagesList, confrontare con il nome dell'utente loggato presente nel token */\n  useEffect(() => {\n    fetch(\"http://localhost:8080/api/chats/getUsernameContact/\" + loggedUser, {\n      method: \"get\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": user\n      }\n    }).then(res => {\n      if (res.ok) return res.json();else throw new Error(\"Errore di comunicazione\");\n    }).then(res => {\n      console.log(\"Questo è il getUserContact\", res);\n      setNames(res);\n      console.log(names);\n    });\n  }, [reload]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"contactList\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Le tue chat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Per visualizzare una chat clicca sul relativo username\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: names.length > 0 && names.map(e => /*#__PURE__*/_jsxDEV(ButtonChat, {\n        icon: faUser,\n        name: e,\n        handler: handler,\n        up: up,\n        children: e\n      }, e, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n}\n_s(ContactList, \"BDLpINuT7QctUECJCCb8ns13FQE=\");\n_c = ContactList;\nvar _c;\n$RefreshReg$(_c, \"ContactList\");","map":{"version":3,"names":["React","useState","useEffect","faUser","ButtonChat","jsxDEV","_jsxDEV","ContactList","loggedUser","handler","up","reload","_s","user","document","cookie","split","find","row","startsWith","names","setNames","fetch","method","headers","then","res","ok","json","Error","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","e","icon","name","_c","$RefreshReg$"],"sources":["C:/Users/giada/OneDrive/Desktop/progetto finale/frontend/src/components/contactList/ContactList.jsx"],"sourcesContent":["import React from \"react\";  \r\nimport {useState,useEffect} from \"react\" \r\nimport {faUser} from \"@fortawesome/free-solid-svg-icons\" \r\nimport ButtonChat from \"./ButtonChat\";\r\nimport \"./contactList.css\"\r\n \r\nexport default function ContactList ({loggedUser, handler, up, reload}) { \r\n \r\n    const user=document.cookie.split(\"; \") \r\n    .find((row) => row.startsWith(\"token\")) \r\n    .split(\"=\")[1]; \r\n \r\n    const [names,setNames] = useState([]); \r\n\r\n    /* Si ottengono tutti i nominativi degli utenti presenti nelle messagesList, confrontare con il nome dell'utente loggato presente nel token */ \r\n    useEffect(()=> { \r\n \r\n        fetch(\"http://localhost:8080/api/chats/getUsernameContact/\" + loggedUser, { \r\n            method: \"get\", \r\n            headers: { \r\n                \"Content-Type\": \"application/json\", \r\n                \"Authorization\": user \r\n            } \r\n        }).then(res=> {if(res.ok) return res.json(); else throw new Error(\"Errore di comunicazione\")}) \r\n        .then(res=> {console.log(\"Questo è il getUserContact\", res); setNames(res); console.log(names)}); \r\n \r\n    }, [reload]); \r\n \r\n    return (\r\n        <div className=\"contactList\">\r\n            <h2>Le tue chat</h2>\r\n            <p>Per visualizzare una chat clicca sul relativo username</p>\r\n            <ul> \r\n                {/*Si crea un ButtonUser per ogni utente amico ritrovato, la key può essere lo username in quanto per come è stata progettata l'app è univoco per ogni utente */} \r\n                { (names.length>0) && (names.map(e => \r\n                    <ButtonChat icon={faUser} name={e} handler={handler} up={up} key={e}>\r\n                        {e}\r\n                    </ButtonChat>))\r\n                } \r\n                \r\n            </ul>\r\n\r\n        </div>\r\n        \r\n    )\r\n     \r\n}"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAAQC,QAAQ,EAACC,SAAS,QAAO,OAAO;AACxC,SAAQC,MAAM,QAAO,mCAAmC;AACxD,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAO,mBAAmB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE1B,eAAe,SAASC,WAAWA,CAAE;EAACC,UAAU;EAAEC,OAAO;EAAEC,EAAE;EAAEC;AAAM,CAAC,EAAE;EAAAC,EAAA;EAEpE,MAAMC,IAAI,GAACC,QAAQ,CAACC,MAAM,CAACC,KAAK,CAAC,IAAI,CAAC,CACrCC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,UAAU,CAAC,OAAO,CAAC,CAAC,CACtCH,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAEd,MAAM,CAACI,KAAK,EAACC,QAAQ,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;;EAErC;EACAC,SAAS,CAAC,MAAK;IAEXoB,KAAK,CAAC,qDAAqD,GAAGd,UAAU,EAAE;MACtEe,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAEX;MACrB;IACJ,CAAC,CAAC,CAACY,IAAI,CAACC,GAAG,IAAG;MAAC,IAAGA,GAAG,CAACC,EAAE,EAAE,OAAOD,GAAG,CAACE,IAAI,CAAC,CAAC,CAAC,KAAM,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;IAAA,CAAC,CAAC,CAC7FJ,IAAI,CAACC,GAAG,IAAG;MAACI,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEL,GAAG,CAAC;MAAEL,QAAQ,CAACK,GAAG,CAAC;MAAEI,OAAO,CAACC,GAAG,CAACX,KAAK,CAAC;IAAA,CAAC,CAAC;EAEpG,CAAC,EAAE,CAACT,MAAM,CAAC,CAAC;EAEZ,oBACIL,OAAA;IAAK0B,SAAS,EAAC,aAAa;IAAAC,QAAA,gBACxB3B,OAAA;MAAA2B,QAAA,EAAI;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACpB/B,OAAA;MAAA2B,QAAA,EAAG;IAAsD;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eAC7D/B,OAAA;MAAA2B,QAAA,EAEOb,KAAK,CAACkB,MAAM,GAAC,CAAC,IAAMlB,KAAK,CAACmB,GAAG,CAACC,CAAC,iBAC9BlC,OAAA,CAACF,UAAU;QAACqC,IAAI,EAAEtC,MAAO;QAACuC,IAAI,EAAEF,CAAE;QAAC/B,OAAO,EAAEA,OAAQ;QAACC,EAAE,EAAEA,EAAG;QAAAuB,QAAA,EACvDO;MAAC,GAD4DA,CAAC;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEvD,CAAC;IAAE;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAGnB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEJ,CAAC;AAId;AAACzB,EAAA,CAxCuBL,WAAW;AAAAoC,EAAA,GAAXpC,WAAW;AAAA,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}