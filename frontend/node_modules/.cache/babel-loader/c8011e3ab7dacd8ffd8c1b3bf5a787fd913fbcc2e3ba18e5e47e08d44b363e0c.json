{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\giada\\\\OneDrive\\\\Desktop\\\\progetto finale\\\\frontend\\\\src\\\\pages\\\\profile\\\\Profilo.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { faRightFromBracket } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport MessagesList from \"../../components/messageList/MessagesList\";\nimport ContactList from \"../../components/contactList/ContactList\";\nimport Card from \"../../components/card/Card\";\nimport \"./profilo.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Profilo({\n  loggedUser,\n  socket,\n  handleUser\n}) {\n  _s();\n  socket.emit(\"ingresso\", {\n    username: loggedUser\n  });\n\n  /*Comando per prelevare dal cookie il token */\n  const token = document.cookie.split(\"; \").find(row => row.startsWith(\"token\")).split(\"=\")[1];\n  const navigate = useNavigate();\n\n  /*Variabile di stato utilizzata per permettere il rendering di UsersList ogni qual volta viene ricevuto un messaggio*/\n  const [update, setUpdate] = useState(false);\n  const [messagesLists, setMessagesLists] = useState([{\n    _id: \"\",\n    messages: []\n  }]);\n  const [selectedUserId, setSelectedUserId] = useState(null);\n  const [selectedUserName, setSelectedUserName] = useState(null);\n  const [currentList, setCurrentList] = useState(null);\n  const [user, setUser] = useState(null);\n  const [posts, setPosts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [reload, setReload] = useState(false);\n\n  // Per la gestione del rendering dei contatti\n  const [reloadChat, setReloadChat] = useState(false);\n\n  // Variabile usata in Card per mostrare o meno il bottone per cancellare i post\n  const prof = true;\n  function changeUpdate() {\n    if (update) setUpdate(false);else setUpdate(true);\n  }\n\n  // handler per la chiusura della chat in caso di cancellazione\n  function handleChatClosure() {\n    // Imposta currentList su null per nascondere MessagesList\n    setCurrentList(null);\n  }\n\n  /* Usata per ottenere tutte le liste dei messaggi che comprendono loggedUser(username) */\n  useEffect(() => {\n    let v = [];\n    fetch(\"http://localhost:8080/api/chats/getMessagesList/\" + loggedUser, {\n      method: \"get\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": token\n      }\n    }).then(res => {\n      if (res.ok) return res.json();else throw new Error(\"Errore di comunicazione\");\n    }).then(res => {\n      v = res;\n      setMessagesLists(res);\n    }).catch(e => console.log(e));\n    socket.on(\"receiveMessage\", data => {\n      console.log(\"Socket ha ricevuto il messaggio: \" + data);\n      changeUpdate();\n      if (selectedUserName === data.sender || selectedUserName === data.receiver) setCurrentList(data.list);else {\n        // trova la lista dei messaggi esistente\n        v.find(e => e._id === data.list._id).messages = data.list.messages;\n        setMessagesLists(v);\n      }\n    });\n    return () => socket.off(\"receiveMessage\");\n  }, [currentList, update, selectedUserName, selectedUserId]);\n\n  /* Usata per prelevare i dati e i post dell'utente autenticato */\n  useEffect(() => {\n    Promise.all([fetch(\"http://localhost:8080/api/users/profile\", {\n      method: \"get\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": token\n      }\n    }).then(res => {\n      if (res.ok) return res.json();else throw new Error(\"Errore di comunicazione\");\n    }), fetch(\"http://localhost:8080/api/users/profilePosts\", {\n      method: 'get',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': token\n      }\n    }).then(res => {\n      if (res.ok) return res.json();else throw new Error(\"Errore di comunicazione\");\n    })]).then(([info, post]) => {\n      setUser(info);\n      setPosts(post);\n      setLoading(false);\n    });\n  }, [currentList, update, selectedUserName, selectedUserId, reload]);\n\n  //risalgo all'ID del ContactUsername        \n  function changeSelectedUser(ContactUsername) {\n    setSelectedUserName(ContactUsername);\n    fetch(\"http://localhost:8080/api/chats/getIdByUsername/\" + ContactUsername).then(res => {\n      if (res.ok) return res.json();else throw new Error(\"Errore di comunicazione\");\n    }).then(res => {\n      //con l'ID risalgo alla lista dei messaggi\n      setSelectedUserId(res);\n      const list = messagesLists.find(e => e.a1.toUpperCase() === res.toUpperCase() || e.a2.toUpperCase() === res.toUpperCase());\n      setCurrentList(list);\n      console.log(\"Questo è list: \", list);\n      console.log(\"Questo è currentList: \", currentList);\n    }).catch(e => console.log(e));\n  }\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"profile-container\",\n      children: [user ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Benvenuto, \", user.username, \"!\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Utente non trovato\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"profileInfo\",\n        children: [user && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: user.email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"logout\",\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/\",\n            onClick: e => {\n              e.preventDefault();\n              handleUser(null);\n              navigate(\"/\");\n            },\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              block: true,\n              size: \"lg\",\n              className: \"button\",\n              children: [\"Log-out \", /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                icon: faRightFromBracket\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 166,\n                columnNumber: 72\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"posts-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"I tuoi post\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 17\n        }, this), posts.length > 0 ? posts && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"posts\",\n          children: posts.map(post => /*#__PURE__*/_jsxDEV(Card, {\n            item: post,\n            profile: prof,\n            setReload: setReload\n          }, post.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Nessun post disponibile\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 22\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"chat\",\n      children: /*#__PURE__*/_jsxDEV(ContactList, {\n        loggedUser: loggedUser,\n        handler: changeSelectedUser,\n        up: update,\n        reload: reloadChat\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"chat-messages\",\n      children: currentList !== null && /*#__PURE__*/_jsxDEV(MessagesList, {\n        messageList: currentList,\n        ContactName: selectedUserName,\n        ContactId: selectedUserId,\n        socket: socket,\n        username: loggedUser,\n        handleChat: handleChatClosure,\n        setReload: setReloadChat\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 41\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n_s(Profilo, \"Ti4/BPokuOxp1F6rDVGJRU7wBVY=\", false, function () {\n  return [useNavigate];\n});\n_c = Profilo;\nvar _c;\n$RefreshReg$(_c, \"Profilo\");","map":{"version":3,"names":["React","useState","useEffect","Button","Link","useNavigate","faRightFromBracket","FontAwesomeIcon","MessagesList","ContactList","Card","jsxDEV","_jsxDEV","Fragment","_Fragment","Profilo","loggedUser","socket","handleUser","_s","emit","username","token","document","cookie","split","find","row","startsWith","navigate","update","setUpdate","messagesLists","setMessagesLists","_id","messages","selectedUserId","setSelectedUserId","selectedUserName","setSelectedUserName","currentList","setCurrentList","user","setUser","posts","setPosts","loading","setLoading","reload","setReload","reloadChat","setReloadChat","prof","changeUpdate","handleChatClosure","v","fetch","method","headers","then","res","ok","json","Error","catch","e","console","log","on","data","sender","receiver","list","off","Promise","all","info","post","changeSelectedUser","ContactUsername","a1","toUpperCase","a2","children","fileName","_jsxFileName","lineNumber","columnNumber","className","email","id","to","onClick","preventDefault","block","size","icon","length","map","item","profile","handler","up","messageList","ContactName","ContactId","handleChat","_c","$RefreshReg$"],"sources":["C:/Users/giada/OneDrive/Desktop/progetto finale/frontend/src/pages/profile/Profilo.jsx"],"sourcesContent":["import React, {useState, useEffect} from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport {Link, useNavigate} from \"react-router-dom\"\r\nimport {faRightFromBracket} from '@fortawesome/free-solid-svg-icons' \r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport MessagesList from \"../../components/messageList/MessagesList\";\r\nimport ContactList from \"../../components/contactList/ContactList\";\r\nimport Card from \"../../components/card/Card\";\r\nimport \"./profilo.css\"\r\n\r\nexport default function Profilo ({loggedUser, socket, handleUser})\r\n{\r\n    \r\n    socket.emit(\"ingresso\", {username: loggedUser}); \r\n \r\n    /*Comando per prelevare dal cookie il token */ \r\n    const token=document.cookie.split(\"; \") \r\n    .find((row) => row.startsWith(\"token\")) \r\n    .split(\"=\")[1]; \r\n\r\n    const navigate = useNavigate();\r\n\r\n    /*Variabile di stato utilizzata per permettere il rendering di UsersList ogni qual volta viene ricevuto un messaggio*/ \r\n    const [update, setUpdate]=useState(false); \r\n\r\n    const [messagesLists,setMessagesLists]=useState([{_id: \"\", messages: []}]); \r\n    const [selectedUserId,setSelectedUserId]=useState(null); \r\n    const [selectedUserName, setSelectedUserName]=useState(null); \r\n    const [currentList,setCurrentList]=useState(null); \r\n\r\n    const [user, setUser] = useState(null);\r\n    const [posts, setPosts] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [reload, setReload] = useState(false);\r\n\r\n    // Per la gestione del rendering dei contatti\r\n    const [reloadChat, setReloadChat] = useState(false)\r\n\r\n    // Variabile usata in Card per mostrare o meno il bottone per cancellare i post\r\n    const prof = true;\r\n \r\n    function changeUpdate(){ \r\n        if(update) setUpdate(false); \r\n        else setUpdate(true); \r\n    } \r\n\r\n    // handler per la chiusura della chat in caso di cancellazione\r\n    function handleChatClosure() {\r\n        // Imposta currentList su null per nascondere MessagesList\r\n        setCurrentList(null);  \r\n    }\r\n\r\n    /* Usata per ottenere tutte le liste dei messaggi che comprendono loggedUser(username) */ \r\n    useEffect(()=>{ \r\n        let v=[];        \r\n \r\n        fetch(\"http://localhost:8080/api/chats/getMessagesList/\" + loggedUser, { \r\n            method: \"get\", \r\n            headers: { \r\n                \"Content-Type\": \"application/json\", \r\n                \"Authorization\": token \r\n            } \r\n        }).then(res=> {if (res.ok) return res.json(); else throw new Error (\"Errore di comunicazione\")}) \r\n        .then(res=>{  \r\n            v=res;  \r\n            setMessagesLists(res);  \r\n        }).catch(e=> console.log(e)); \r\n        \r\n        socket.on(\"receiveMessage\", (data)=>{ \r\n            console.log(\"Socket ha ricevuto il messaggio: \" + data); \r\n            changeUpdate(); \r\n            if(selectedUserName===data.sender || selectedUserName===data.receiver) \r\n            setCurrentList(data.list); \r\n            else{ // trova la lista dei messaggi esistente\r\n                v.find(e=> e._id===data.list._id).messages=data.list.messages; \r\n                setMessagesLists(v); \r\n            }\r\n        });\r\n             \r\n        return()=>socket.off(\"receiveMessage\");\r\n \r\n    }, [currentList, update, selectedUserName, selectedUserId]);\r\n\r\n    /* Usata per prelevare i dati e i post dell'utente autenticato */\r\n    useEffect(() => {\r\n\r\n        Promise.all([\r\n            fetch(\"http://localhost:8080/api/users/profile\", {\r\n                method: \"get\",\r\n                headers: { \r\n                    \"Content-Type\": \"application/json\", \r\n                    \"Authorization\": token \r\n                } \r\n            }).then(res=> {\r\n                if (res.ok) return res.json(); \r\n                else throw new Error (\"Errore di comunicazione\")\r\n            }),\r\n\r\n            fetch(\"http://localhost:8080/api/users/profilePosts\", {\r\n                method: 'get',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': token\r\n                }\r\n            }).then(res=> {\r\n                if (res.ok) return res.json(); \r\n                else throw new Error (\"Errore di comunicazione\")\r\n            }),\r\n\r\n        ]).then(([info, post]) => {\r\n            setUser(info)\r\n            setPosts(post)\r\n            setLoading(false)\r\n        })\r\n\r\n    }, [currentList, update, selectedUserName, selectedUserId, reload])\r\n\r\n    //risalgo all'ID del ContactUsername        \r\n    function changeSelectedUser(ContactUsername){ \r\n        setSelectedUserName(ContactUsername); \r\n        fetch(\"http://localhost:8080/api/chats/getIdByUsername/\"+ ContactUsername)\r\n        .then(res=> {\r\n            if (res.ok) return res.json(); \r\n            else throw new Error(\"Errore di comunicazione\")\r\n        })\r\n        .then(res=>{  \r\n            //con l'ID risalgo alla lista dei messaggi\r\n            setSelectedUserId(res); \r\n            const list= messagesLists.find(e=>  e.a1.toUpperCase()===res.toUpperCase() || e.a2.toUpperCase()===res.toUpperCase()); \r\n            setCurrentList(list); \r\n            console.log(\"Questo è list: \", list)\r\n            console.log(\"Questo è currentList: \", currentList)\r\n \r\n        }).catch(e=>console.log(e)); \r\n    }\r\n\r\n    if (loading) {\r\n        return <div>Loading...</div>;\r\n    }\r\n\r\n    return (\r\n    <>\r\n        <div className='profile-container'>\r\n            {/* Se viene trovato l'utente allora mostra i vari dettagli*/}\r\n            {user ? (\r\n                <div>\r\n                    <h1>Benvenuto, {user.username}!</h1>\r\n                </div>\r\n            ) : (<p>Utente non trovato</p>)\r\n            }\r\n            <div className=\"profileInfo\">\r\n                {user && (\r\n                    <div>\r\n                        <p>{user.email}</p>\r\n                    </div>\r\n                )}\r\n\r\n                <div id=\"logout\"> \r\n\r\n                    <Link to=\"/\" onClick={e=> { \r\n                        e.preventDefault(); \r\n                        handleUser(null); \r\n                        navigate(\"/\"); \r\n                    }}>\r\n                    \r\n                    <Button block size=\"lg\" className=\"button\">Log-out <FontAwesomeIcon icon={faRightFromBracket} /></Button></Link> \r\n                    \r\n                </div>\r\n            </div>\r\n\r\n            <div className='posts-container'>\r\n\r\n                <h2>I tuoi post</h2>\r\n\r\n                {/* Se la dimensione dell'array è maggiore di 0 allora vengono mostrati tutti i post */}                \r\n                {posts.length > 0 ? (posts &&\r\n                    <div className=\"posts\">\r\n                        {posts.map(post => (\r\n                            <Card item={post} key={post.id} profile={prof} setReload={setReload}/>\r\n                        ))}\r\n                    </div>\r\n                ) : (<p>Nessun post disponibile</p>)\r\n                }\r\n        \r\n            </div>\r\n        </div>\r\n\r\n        \r\n\r\n        <div id=\"chat\">\r\n\r\n            <ContactList loggedUser={loggedUser} handler={changeSelectedUser} up={update} reload={reloadChat}/>\r\n\r\n        </div>      \r\n\r\n        <div id=\"chat-messages\">\r\n            {/* Si passa a messagesList la lista dei messaggi filtrata, si otterrà solo la lista tra utente loggato e selezionato */} \r\n            {(currentList !== null) && (<MessagesList \r\n                messageList={currentList} \r\n                ContactName={selectedUserName} \r\n                ContactId={selectedUserId} \r\n                socket={socket} \r\n                username={loggedUser} \r\n                handleChat={handleChatClosure}\r\n                setReload={setReloadChat}\r\n                />)\r\n            }  \r\n        </div>\r\n      \r\n    </>\r\n);\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}