{"ast":null,"code":"import{createContext,useEffect,useState}from\"react\";// Crea un contesto React per gestire lo stato di caricamento dello script Cloudinary\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const CloudinaryScriptContext=/*#__PURE__*/createContext();function UploadImage(_ref){let{uwConfig,setState}=_ref;// Per tracciare se lo script Cloudinary è stato caricato\nconst[loaded,setLoaded]=useState(false);// Per gestire il caricamento dello script Cloudinary\nuseEffect(()=>{// Controlla se lo script non è stato ancora caricato\nif(!loaded){const uwScript=document.getElementById(\"uw\");if(!uwScript){// Se lo script non è presente nel DOM, lo creo e lo aggiungo\nconst script=document.createElement(\"script\");script.setAttribute(\"async\",\"\");script.setAttribute(\"id\",\"uw\");script.src=\"https://upload-widget.cloudinary.com/global/all.js\";// Aggiorno lo stato quando lo script è caricato\nscript.addEventListener(\"load\",()=>setLoaded(true));document.body.appendChild(script);}else{// Altrimenti aggiorno lo stato\nsetLoaded(true);}}},[loaded]);// Funzione per inizializzare il widget Cloudinary quando lo script è caricato\nconst initializeCloudinaryWidget=()=>{if(loaded){var myWidget=window.cloudinary.createUploadWidget(uwConfig,(error,result)=>{// Callback per gestire il risultato dell'upload\nif(!error&&result&&result.event===\"success\"){console.log(\"Immagine caricata! Ecco le sue info: \",result.info);// Aggiorna lo stato con l'URL dell'immagine caricata\nsetState(prev=>[...prev,result.info.secure_url]);}});// Aggiunge un listener al bottone per aprire il widget di upload\ndocument.getElementById(\"upload_widget\").addEventListener(\"click\",function(){myWidget.open();},false);}};return/*#__PURE__*/_jsx(CloudinaryScriptContext.Provider,{value:{loaded},children:/*#__PURE__*/_jsxs(\"button\",{id:\"upload_widget\",className:\"cloudinary-button\",onClick:initializeCloudinaryWidget,children:[/*#__PURE__*/_jsx(\"img\",{src:\"/upload_2.png\",alt:\"\",className:\"upload\"}),\"Carica immagini\"]})});}export default UploadImage;export{CloudinaryScriptContext};","map":{"version":3,"names":["createContext","useEffect","useState","jsx","_jsx","jsxs","_jsxs","CloudinaryScriptContext","UploadImage","_ref","uwConfig","setState","loaded","setLoaded","uwScript","document","getElementById","script","createElement","setAttribute","src","addEventListener","body","appendChild","initializeCloudinaryWidget","myWidget","window","cloudinary","createUploadWidget","error","result","event","console","log","info","prev","secure_url","open","Provider","value","children","id","className","onClick","alt"],"sources":["C:/Users/lpaco/WebstormProjects/progetto finale/.progetto/frontend/src/components/uploadImage/UploadImage.jsx"],"sourcesContent":["import { createContext, useEffect, useState } from \"react\";\r\n\r\n\r\n// Crea un contesto React per gestire lo stato di caricamento dello script Cloudinary\r\nconst CloudinaryScriptContext = createContext();\r\n\r\nfunction UploadImage({ uwConfig, setState }) {\r\n\r\n    // Per tracciare se lo script Cloudinary è stato caricato\r\n    const [loaded, setLoaded] = useState(false);\r\n\r\n    // Per gestire il caricamento dello script Cloudinary\r\n    useEffect(() => {\r\n        \r\n        // Controlla se lo script non è stato ancora caricato\r\n        if (!loaded) {\r\n            const uwScript = document.getElementById(\"uw\");\r\n            if (!uwScript) {\r\n                // Se lo script non è presente nel DOM, lo creo e lo aggiungo\r\n                const script = document.createElement(\"script\");\r\n                script.setAttribute(\"async\", \"\");\r\n                script.setAttribute(\"id\", \"uw\");\r\n                script.src = \"https://upload-widget.cloudinary.com/global/all.js\";\r\n                // Aggiorno lo stato quando lo script è caricato\r\n                script.addEventListener(\"load\", () => setLoaded(true));\r\n                document.body.appendChild(script);\r\n            } else {\r\n                // Altrimenti aggiorno lo stato\r\n                setLoaded(true);\r\n            }\r\n        }\r\n    }, [loaded]);\r\n\r\n    // Funzione per inizializzare il widget Cloudinary quando lo script è caricato\r\n    const initializeCloudinaryWidget = () => {\r\n        if (loaded) {\r\n            var myWidget = window.cloudinary.createUploadWidget(\r\n                uwConfig,\r\n                (error, result) => {\r\n                    // Callback per gestire il risultato dell'upload\r\n                    if (!error && result && result.event === \"success\") {\r\n                        console.log(\"Immagine caricata! Ecco le sue info: \", result.info);\r\n                        // Aggiorna lo stato con l'URL dell'immagine caricata\r\n                        setState((prev) => [...prev, result.info.secure_url]);\r\n                    }\r\n                }\r\n            );\r\n\r\n            // Aggiunge un listener al bottone per aprire il widget di upload\r\n            document.getElementById(\"upload_widget\").addEventListener(\r\n                \"click\",\r\n                function () {\r\n                    myWidget.open();\r\n                },\r\n                false\r\n            );\r\n        }\r\n    };\r\n\r\n    return (\r\n\r\n        <CloudinaryScriptContext.Provider value={{ loaded }}>\r\n            <button\r\n                id=\"upload_widget\"\r\n                className=\"cloudinary-button\"\r\n                onClick={initializeCloudinaryWidget}\r\n            >\r\n                <img src=\"/upload_2.png\" alt=\"\" className=\"upload\"/>\r\n                Carica immagini\r\n            </button>\r\n        </CloudinaryScriptContext.Provider>\r\n    );\r\n}\r\n\r\nexport default UploadImage;\r\nexport { CloudinaryScriptContext };"],"mappings":"AAAA,OAASA,aAAa,CAAEC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAG1D;AAAA,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBACA,KAAM,CAAAC,uBAAuB,cAAGP,aAAa,CAAC,CAAC,CAE/C,QAAS,CAAAQ,WAAWA,CAAAC,IAAA,CAAyB,IAAxB,CAAEC,QAAQ,CAAEC,QAAS,CAAC,CAAAF,IAAA,CAEvC;AACA,KAAM,CAACG,MAAM,CAAEC,SAAS,CAAC,CAAGX,QAAQ,CAAC,KAAK,CAAC,CAE3C;AACAD,SAAS,CAAC,IAAM,CAEZ;AACA,GAAI,CAACW,MAAM,CAAE,CACT,KAAM,CAAAE,QAAQ,CAAGC,QAAQ,CAACC,cAAc,CAAC,IAAI,CAAC,CAC9C,GAAI,CAACF,QAAQ,CAAE,CACX;AACA,KAAM,CAAAG,MAAM,CAAGF,QAAQ,CAACG,aAAa,CAAC,QAAQ,CAAC,CAC/CD,MAAM,CAACE,YAAY,CAAC,OAAO,CAAE,EAAE,CAAC,CAChCF,MAAM,CAACE,YAAY,CAAC,IAAI,CAAE,IAAI,CAAC,CAC/BF,MAAM,CAACG,GAAG,CAAG,oDAAoD,CACjE;AACAH,MAAM,CAACI,gBAAgB,CAAC,MAAM,CAAE,IAAMR,SAAS,CAAC,IAAI,CAAC,CAAC,CACtDE,QAAQ,CAACO,IAAI,CAACC,WAAW,CAACN,MAAM,CAAC,CACrC,CAAC,IAAM,CACH;AACAJ,SAAS,CAAC,IAAI,CAAC,CACnB,CACJ,CACJ,CAAC,CAAE,CAACD,MAAM,CAAC,CAAC,CAEZ;AACA,KAAM,CAAAY,0BAA0B,CAAGA,CAAA,GAAM,CACrC,GAAIZ,MAAM,CAAE,CACR,GAAI,CAAAa,QAAQ,CAAGC,MAAM,CAACC,UAAU,CAACC,kBAAkB,CAC/ClB,QAAQ,CACR,CAACmB,KAAK,CAAEC,MAAM,GAAK,CACf;AACA,GAAI,CAACD,KAAK,EAAIC,MAAM,EAAIA,MAAM,CAACC,KAAK,GAAK,SAAS,CAAE,CAChDC,OAAO,CAACC,GAAG,CAAC,uCAAuC,CAAEH,MAAM,CAACI,IAAI,CAAC,CACjE;AACAvB,QAAQ,CAAEwB,IAAI,EAAK,CAAC,GAAGA,IAAI,CAAEL,MAAM,CAACI,IAAI,CAACE,UAAU,CAAC,CAAC,CACzD,CACJ,CACJ,CAAC,CAED;AACArB,QAAQ,CAACC,cAAc,CAAC,eAAe,CAAC,CAACK,gBAAgB,CACrD,OAAO,CACP,UAAY,CACRI,QAAQ,CAACY,IAAI,CAAC,CAAC,CACnB,CAAC,CACD,KACJ,CAAC,CACL,CACJ,CAAC,CAED,mBAEIjC,IAAA,CAACG,uBAAuB,CAAC+B,QAAQ,EAACC,KAAK,CAAE,CAAE3B,MAAO,CAAE,CAAA4B,QAAA,cAChDlC,KAAA,WACImC,EAAE,CAAC,eAAe,CAClBC,SAAS,CAAC,mBAAmB,CAC7BC,OAAO,CAAEnB,0BAA2B,CAAAgB,QAAA,eAEpCpC,IAAA,QAAKgB,GAAG,CAAC,eAAe,CAACwB,GAAG,CAAC,EAAE,CAACF,SAAS,CAAC,QAAQ,CAAC,CAAC,kBAExD,EAAQ,CAAC,CACqB,CAAC,CAE3C,CAEA,cAAe,CAAAlC,WAAW,CAC1B,OAASD,uBAAuB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}