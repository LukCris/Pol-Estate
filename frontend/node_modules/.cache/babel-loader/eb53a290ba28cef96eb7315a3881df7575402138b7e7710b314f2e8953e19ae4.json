{"ast":null,"code":"import React,{useState,useEffect}from\"react\";import Button from\"react-bootstrap/Button\";import{Link,useNavigate}from\"react-router-dom\";import{faRightFromBracket}from'@fortawesome/free-solid-svg-icons';import{FontAwesomeIcon}from'@fortawesome/react-fontawesome';import MessagesList from\"../../components/messageList/MessagesList\";import ContactList from\"../../components/contactList/ContactList\";import Card from\"../../components/card/Card\";import\"./profilo.css\";import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";export default function Profilo(_ref){let{loggedUser,socket,handleUser}=_ref;socket.emit(\"ingresso\",{username:loggedUser});/*Comando per prelevare dal cookie il token */const token=document.cookie.split(\"; \").find(row=>row.startsWith(\"token\")).split(\"=\")[1];const navigate=useNavigate();/*Variabile di stato utilizzata per permettere il rendering di UsersList ogni qual volta viene ricevuto un messaggio*/const[update,setUpdate]=useState(false);const[messagesLists,setMessagesLists]=useState([{_id:\"\",messages:[]}]);const[selectedUserId,setSelectedUserId]=useState(null);const[selectedUserName,setSelectedUserName]=useState(null);const[currentList,setCurrentList]=useState(null);const[user,setUser]=useState(null);const[posts,setPosts]=useState([]);const[loading,setLoading]=useState(true);const[reload,setReload]=useState(false);// Per la gestione del rendering dei contatti\nconst[reloadChat,setReloadChat]=useState(false);// Variabile usata in Card per mostrare o meno il bottone per cancellare i post\nconst prof=true;function changeUpdate(){if(update)setUpdate(false);else setUpdate(true);}// handler per la chiusura della chat in caso di cancellazione\nfunction handleChatClosure(){// Imposta currentList su null per nascondere MessagesList\nsetCurrentList(null);}/* Usata per ottenere tutte le liste dei messaggi che comprendono loggedUser(username) */useEffect(()=>{let v=[];fetch(\"http://localhost:8080/api/chats/getMessagesList/\"+loggedUser,{method:\"get\",headers:{\"Content-Type\":\"application/json\",\"Authorization\":token}}).then(res=>{if(res.ok)return res.json();else throw new Error(\"Errore di comunicazione\");}).then(res=>{v=res;setMessagesLists(res);}).catch(e=>console.log(e));socket.on(\"receiveMessage\",data=>{console.log(\"Socket ha ricevuto il messaggio: \"+data);changeUpdate();if(selectedUserName===data.sender||selectedUserName===data.receiver)setCurrentList(data.list);else{// trova la lista dei messaggi esistente\nv.find(e=>e._id===data.list._id).messages=data.list.messages;setMessagesLists(v);}});return()=>socket.off(\"receiveMessage\");},[currentList,update,selectedUserName,selectedUserId]);/* Usata per prelevare i dati e i post dell'utente autenticato */useEffect(()=>{Promise.all([fetch(\"http://localhost:8080/api/users/profile\",{method:\"get\",headers:{\"Content-Type\":\"application/json\",\"Authorization\":token}}).then(res=>{if(res.ok)return res.json();else throw new Error(\"Errore di comunicazione\");}),fetch(\"http://localhost:8080/api/users/profilePosts\",{method:'get',headers:{'Content-Type':'application/json','Authorization':token}}).then(res=>{if(res.ok)return res.json();else throw new Error(\"Errore di comunicazione\");})]).then(_ref2=>{let[info,post]=_ref2;setUser(info);setPosts(post);setLoading(false);});},[currentList,update,selectedUserName,selectedUserId,reload]);//risalgo all'ID del ContactUsername        \nfunction changeSelectedUser(ContactUsername){setSelectedUserName(ContactUsername);fetch(\"http://localhost:8080/api/chats/getIdByUsername/\"+ContactUsername).then(res=>{if(res.ok)return res.json();else throw new Error(\"Errore di comunicazione\");}).then(res=>{//con l'ID risalgo alla lista dei messaggi\nsetSelectedUserId(res);const list=messagesLists.find(e=>e.a1.toUpperCase()===res.toUpperCase()||e.a2.toUpperCase()===res.toUpperCase());setCurrentList(list);console.log(\"Questo è list: \",list);console.log(\"Questo è currentList: \",currentList);}).catch(e=>console.log(e));}if(loading){return/*#__PURE__*/_jsx(\"div\",{children:\"Loading...\"});}return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"profile-container\",children:[user?/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(\"h1\",{children:[\"Benvenuto, \",user.username,\"!\"]})}):/*#__PURE__*/_jsx(\"p\",{children:\"Utente non trovato\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"profileInfo\",children:[user&&/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"p\",{children:user.email})}),/*#__PURE__*/_jsx(\"div\",{id:\"logout\",children:/*#__PURE__*/_jsx(Link,{to:\"/\",onClick:e=>{e.preventDefault();handleUser(null);navigate(\"/\");},children:/*#__PURE__*/_jsxs(Button,{block:true,size:\"lg\",className:\"button\",children:[\"Log-out \",/*#__PURE__*/_jsx(FontAwesomeIcon,{icon:faRightFromBracket})]})})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"posts-container\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"I tuoi post\"}),posts.length>0?posts&&/*#__PURE__*/_jsx(\"div\",{className:\"posts\",children:posts.map(post=>/*#__PURE__*/_jsx(Card,{item:post,profile:prof,setReload:setReload},post.id))}):/*#__PURE__*/_jsx(\"p\",{children:\"Nessun post disponibile\"})]})]}),/*#__PURE__*/_jsx(\"div\",{id:\"chat\",children:/*#__PURE__*/_jsx(ContactList,{loggedUser:loggedUser,handler:changeSelectedUser,up:update,reload:reloadChat})}),/*#__PURE__*/_jsx(\"div\",{id:\"chat-messages\",children:currentList!==null&&/*#__PURE__*/_jsx(MessagesList,{messageList:currentList,ContactName:selectedUserName,ContactId:selectedUserId,socket:socket,username:loggedUser,handleChat:handleChatClosure,setReload:setReloadChat})})]});}","map":{"version":3,"names":["React","useState","useEffect","Button","Link","useNavigate","faRightFromBracket","FontAwesomeIcon","MessagesList","ContactList","Card","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","Profilo","_ref","loggedUser","socket","handleUser","emit","username","token","document","cookie","split","find","row","startsWith","navigate","update","setUpdate","messagesLists","setMessagesLists","_id","messages","selectedUserId","setSelectedUserId","selectedUserName","setSelectedUserName","currentList","setCurrentList","user","setUser","posts","setPosts","loading","setLoading","reload","setReload","reloadChat","setReloadChat","prof","changeUpdate","handleChatClosure","v","fetch","method","headers","then","res","ok","json","Error","catch","e","console","log","on","data","sender","receiver","list","off","Promise","all","_ref2","info","post","changeSelectedUser","ContactUsername","a1","toUpperCase","a2","children","className","email","id","to","onClick","preventDefault","block","size","icon","length","map","item","profile","handler","up","messageList","ContactName","ContactId","handleChat"],"sources":["C:/Users/lpaco/WebstormProjects/progetto finale/.progetto/frontend/src/pages/profile/Profilo.jsx"],"sourcesContent":["import React, {useState, useEffect} from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport {Link, useNavigate} from \"react-router-dom\"\r\nimport {faRightFromBracket} from '@fortawesome/free-solid-svg-icons' \r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport MessagesList from \"../../components/messageList/MessagesList\";\r\nimport ContactList from \"../../components/contactList/ContactList\";\r\nimport Card from \"../../components/card/Card\";\r\nimport \"./profilo.css\"\r\n\r\nexport default function Profilo ({loggedUser, socket, handleUser})\r\n{\r\n    \r\n    socket.emit(\"ingresso\", {username: loggedUser}); \r\n \r\n    /*Comando per prelevare dal cookie il token */ \r\n    const token=document.cookie.split(\"; \") \r\n    .find((row) => row.startsWith(\"token\")) \r\n    .split(\"=\")[1]; \r\n\r\n    const navigate = useNavigate();\r\n\r\n    /*Variabile di stato utilizzata per permettere il rendering di UsersList ogni qual volta viene ricevuto un messaggio*/ \r\n    const [update, setUpdate]=useState(false); \r\n\r\n    const [messagesLists,setMessagesLists]=useState([{_id: \"\", messages: []}]); \r\n    const [selectedUserId,setSelectedUserId]=useState(null); \r\n    const [selectedUserName, setSelectedUserName]=useState(null); \r\n    const [currentList,setCurrentList]=useState(null); \r\n\r\n    const [user, setUser] = useState(null);\r\n    const [posts, setPosts] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [reload, setReload] = useState(false);\r\n\r\n    // Per la gestione del rendering dei contatti\r\n    const [reloadChat, setReloadChat] = useState(false)\r\n\r\n    // Variabile usata in Card per mostrare o meno il bottone per cancellare i post\r\n    const prof = true;\r\n \r\n    function changeUpdate(){ \r\n        if(update) setUpdate(false); \r\n        else setUpdate(true); \r\n    } \r\n\r\n    // handler per la chiusura della chat in caso di cancellazione\r\n    function handleChatClosure() {\r\n        // Imposta currentList su null per nascondere MessagesList\r\n        setCurrentList(null);  \r\n    }\r\n\r\n    /* Usata per ottenere tutte le liste dei messaggi che comprendono loggedUser(username) */ \r\n    useEffect(()=>{ \r\n        let v=[];        \r\n \r\n        fetch(\"http://localhost:8080/api/chats/getMessagesList/\" + loggedUser, { \r\n            method: \"get\", \r\n            headers: { \r\n                \"Content-Type\": \"application/json\", \r\n                \"Authorization\": token \r\n            } \r\n        }).then(res=> {if (res.ok) return res.json(); else throw new Error (\"Errore di comunicazione\")}) \r\n        .then(res=>{  \r\n            v=res;  \r\n            setMessagesLists(res);  \r\n        }).catch(e=> console.log(e)); \r\n        \r\n        socket.on(\"receiveMessage\", (data)=>{ \r\n            console.log(\"Socket ha ricevuto il messaggio: \" + data); \r\n            changeUpdate(); \r\n            if(selectedUserName===data.sender || selectedUserName===data.receiver) \r\n            setCurrentList(data.list); \r\n            else{ // trova la lista dei messaggi esistente\r\n                v.find(e=> e._id===data.list._id).messages=data.list.messages; \r\n                setMessagesLists(v); \r\n            }\r\n        });\r\n             \r\n        return()=>socket.off(\"receiveMessage\");\r\n \r\n    }, [currentList, update, selectedUserName, selectedUserId]);\r\n\r\n    /* Usata per prelevare i dati e i post dell'utente autenticato */\r\n    useEffect(() => {\r\n\r\n        Promise.all([\r\n            fetch(\"http://localhost:8080/api/users/profile\", {\r\n                method: \"get\",\r\n                headers: { \r\n                    \"Content-Type\": \"application/json\", \r\n                    \"Authorization\": token \r\n                } \r\n            }).then(res=> {\r\n                if (res.ok) return res.json(); \r\n                else throw new Error (\"Errore di comunicazione\")\r\n            }),\r\n\r\n            fetch(\"http://localhost:8080/api/users/profilePosts\", {\r\n                method: 'get',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': token\r\n                }\r\n            }).then(res=> {\r\n                if (res.ok) return res.json(); \r\n                else throw new Error (\"Errore di comunicazione\")\r\n            }),\r\n\r\n        ]).then(([info, post]) => {\r\n            setUser(info)\r\n            setPosts(post)\r\n            setLoading(false)\r\n        })\r\n\r\n    }, [currentList, update, selectedUserName, selectedUserId, reload])\r\n\r\n    //risalgo all'ID del ContactUsername        \r\n    function changeSelectedUser(ContactUsername){ \r\n        setSelectedUserName(ContactUsername); \r\n        fetch(\"http://localhost:8080/api/chats/getIdByUsername/\"+ ContactUsername)\r\n        .then(res=> {\r\n            if (res.ok) return res.json(); \r\n            else throw new Error(\"Errore di comunicazione\")\r\n        })\r\n        .then(res=>{  \r\n            //con l'ID risalgo alla lista dei messaggi\r\n            setSelectedUserId(res); \r\n            const list= messagesLists.find(e=>  e.a1.toUpperCase()===res.toUpperCase() || e.a2.toUpperCase()===res.toUpperCase()); \r\n            setCurrentList(list); \r\n            console.log(\"Questo è list: \", list)\r\n            console.log(\"Questo è currentList: \", currentList)\r\n \r\n        }).catch(e=>console.log(e)); \r\n    }\r\n\r\n    if (loading) {\r\n        return <div>Loading...</div>;\r\n    }\r\n\r\n    return (\r\n    <>\r\n        <div className='profile-container'>\r\n            {/* Se viene trovato l'utente allora mostra i vari dettagli*/}\r\n            {user ? (\r\n                <div>\r\n                    <h1>Benvenuto, {user.username}!</h1>\r\n                </div>\r\n            ) : (<p>Utente non trovato</p>)\r\n            }\r\n            <div className=\"profileInfo\">\r\n                {user && (\r\n                    <div>\r\n                        <p>{user.email}</p>\r\n                    </div>\r\n                )}\r\n\r\n                <div id=\"logout\"> \r\n\r\n                    <Link to=\"/\" onClick={e=> { \r\n                        e.preventDefault(); \r\n                        handleUser(null); \r\n                        navigate(\"/\"); \r\n                    }}>\r\n                    \r\n                    <Button block size=\"lg\" className=\"button\">Log-out <FontAwesomeIcon icon={faRightFromBracket} /></Button></Link> \r\n                    \r\n                </div>\r\n            </div>\r\n\r\n            <div className='posts-container'>\r\n\r\n                <h2>I tuoi post</h2>\r\n\r\n                {/* Se la dimensione dell'array è maggiore di 0 allora vengono mostrati tutti i post */}                \r\n                {posts.length > 0 ? (posts &&\r\n                    <div className=\"posts\">\r\n                        {posts.map(post => (\r\n                            <Card item={post} key={post.id} profile={prof} setReload={setReload}/>\r\n                        ))}\r\n                    </div>\r\n                ) : (<p>Nessun post disponibile</p>)\r\n                }\r\n        \r\n            </div>\r\n        </div>\r\n\r\n        \r\n\r\n        <div id=\"chat\">\r\n\r\n            <ContactList loggedUser={loggedUser} handler={changeSelectedUser} up={update} reload={reloadChat}/>\r\n\r\n        </div>      \r\n\r\n        <div id=\"chat-messages\">\r\n            {/* Si passa a messagesList la lista dei messaggi filtrata, si otterrà solo la lista tra utente loggato e selezionato */} \r\n            {(currentList !== null) && (<MessagesList \r\n                messageList={currentList} \r\n                ContactName={selectedUserName} \r\n                ContactId={selectedUserId} \r\n                socket={socket} \r\n                username={loggedUser} \r\n                handleChat={handleChatClosure}\r\n                setReload={setReloadChat}\r\n                />)\r\n            }  \r\n        </div>\r\n      \r\n    </>\r\n);\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}