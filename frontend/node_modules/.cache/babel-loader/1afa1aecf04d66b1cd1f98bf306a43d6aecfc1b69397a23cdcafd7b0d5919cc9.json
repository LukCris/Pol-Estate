{"ast":null,"code":"import React from\"react\";import{useState,useEffect}from\"react\";import{faUser}from\"@fortawesome/free-solid-svg-icons\";import ButtonChat from\"./ButtonChat\";import\"./contactList.css\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export default function ContactList(_ref){let{loggedUser,handler,up,reload}=_ref;const user=document.cookie.split(\"; \").find(row=>row.startsWith(\"token\")).split(\"=\")[1];const[names,setNames]=useState([]);/* Si ottengono tutti i nominativi degli utenti presenti nelle messagesList, confrontare con il nome dell'utente loggato presente nel token */useEffect(()=>{fetch(\"http://localhost:8080/api/chats/getUsernameContact/\"+loggedUser,{method:\"get\",headers:{\"Content-Type\":\"application/json\",\"Authorization\":user}}).then(res=>{if(res.ok)return res.json();else throw new Error(\"Errore di comunicazione\");}).then(res=>{console.log(\"Questo è il getUserContact\",res);setNames(res);console.log(names);});},[reload]);return/*#__PURE__*/_jsxs(\"div\",{className:\"contactList\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Le tue chat\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Per visualizzare una chat clicca sul relativo username\"}),/*#__PURE__*/_jsx(\"ul\",{children:names.length>0&&names.map(e=>/*#__PURE__*/_jsx(ButtonChat,{icon:faUser,name:e,handler:handler,up:up,children:e},e))})]});}","map":{"version":3,"names":["React","useState","useEffect","faUser","ButtonChat","jsx","_jsx","jsxs","_jsxs","ContactList","_ref","loggedUser","handler","up","reload","user","document","cookie","split","find","row","startsWith","names","setNames","fetch","method","headers","then","res","ok","json","Error","console","log","className","children","length","map","e","icon","name"],"sources":["C:/Users/lpaco/WebstormProjects/progetto finale/.progetto/frontend/src/components/contactList/ContactList.jsx"],"sourcesContent":["import React from \"react\";  \r\nimport {useState,useEffect} from \"react\" \r\nimport {faUser} from \"@fortawesome/free-solid-svg-icons\" \r\nimport ButtonChat from \"./ButtonChat\";\r\nimport \"./contactList.css\"\r\n \r\nexport default function ContactList ({loggedUser, handler, up, reload}) { \r\n \r\n    const user=document.cookie.split(\"; \") \r\n    .find((row) => row.startsWith(\"token\")) \r\n    .split(\"=\")[1]; \r\n \r\n    const [names,setNames] = useState([]); \r\n\r\n    /* Si ottengono tutti i nominativi degli utenti presenti nelle messagesList, confrontare con il nome dell'utente loggato presente nel token */ \r\n    useEffect(()=> { \r\n \r\n        fetch(\"http://localhost:8080/api/chats/getUsernameContact/\" + loggedUser, { \r\n            method: \"get\", \r\n            headers: { \r\n                \"Content-Type\": \"application/json\", \r\n                \"Authorization\": user \r\n            } \r\n        }).then(res=> {if(res.ok) return res.json(); else throw new Error(\"Errore di comunicazione\")}) \r\n        .then(res=> {console.log(\"Questo è il getUserContact\", res); setNames(res); console.log(names)}); \r\n \r\n    }, [reload]); \r\n \r\n    return (\r\n        <div className=\"contactList\">\r\n            <h2>Le tue chat</h2>\r\n            <p>Per visualizzare una chat clicca sul relativo username</p>\r\n            <ul> \r\n                {/*Si crea un ButtonUser per ogni utente amico ritrovato, la key può essere lo username in quanto per come è stata progettata l'app è univoco per ogni utente */} \r\n                { (names.length>0) && (names.map(e => \r\n                    <ButtonChat icon={faUser} name={e} handler={handler} up={up} key={e}>\r\n                        {e}\r\n                    </ButtonChat>))\r\n                } \r\n                \r\n            </ul>\r\n\r\n        </div>\r\n        \r\n    )\r\n     \r\n}"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,OAAQC,QAAQ,CAACC,SAAS,KAAO,OAAO,CACxC,OAAQC,MAAM,KAAO,mCAAmC,CACxD,MAAO,CAAAC,UAAU,KAAM,cAAc,CACrC,MAAO,mBAAmB,QAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAE1B,cAAe,SAAS,CAAAC,WAAWA,CAAAC,IAAA,CAAqC,IAAnC,CAACC,UAAU,CAAEC,OAAO,CAAEC,EAAE,CAAEC,MAAM,CAAC,CAAAJ,IAAA,CAElE,KAAM,CAAAK,IAAI,CAACC,QAAQ,CAACC,MAAM,CAACC,KAAK,CAAC,IAAI,CAAC,CACrCC,IAAI,CAAEC,GAAG,EAAKA,GAAG,CAACC,UAAU,CAAC,OAAO,CAAC,CAAC,CACtCH,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAEd,KAAM,CAACI,KAAK,CAACC,QAAQ,CAAC,CAAGtB,QAAQ,CAAC,EAAE,CAAC,CAErC,8IACAC,SAAS,CAAC,IAAK,CAEXsB,KAAK,CAAC,qDAAqD,CAAGb,UAAU,CAAE,CACtEc,MAAM,CAAE,KAAK,CACbC,OAAO,CAAE,CACL,cAAc,CAAE,kBAAkB,CAClC,eAAe,CAAEX,IACrB,CACJ,CAAC,CAAC,CAACY,IAAI,CAACC,GAAG,EAAG,CAAC,GAAGA,GAAG,CAACC,EAAE,CAAE,MAAO,CAAAD,GAAG,CAACE,IAAI,CAAC,CAAC,CAAC,IAAM,MAAM,IAAI,CAAAC,KAAK,CAAC,yBAAyB,CAAC,EAAC,CAAC,CAC7FJ,IAAI,CAACC,GAAG,EAAG,CAACI,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAEL,GAAG,CAAC,CAAEL,QAAQ,CAACK,GAAG,CAAC,CAAEI,OAAO,CAACC,GAAG,CAACX,KAAK,CAAC,EAAC,CAAC,CAEpG,CAAC,CAAE,CAACR,MAAM,CAAC,CAAC,CAEZ,mBACIN,KAAA,QAAK0B,SAAS,CAAC,aAAa,CAAAC,QAAA,eACxB7B,IAAA,OAAA6B,QAAA,CAAI,aAAW,CAAI,CAAC,cACpB7B,IAAA,MAAA6B,QAAA,CAAG,wDAAsD,CAAG,CAAC,cAC7D7B,IAAA,OAAA6B,QAAA,CAEOb,KAAK,CAACc,MAAM,CAAC,CAAC,EAAMd,KAAK,CAACe,GAAG,CAACC,CAAC,eAC9BhC,IAAA,CAACF,UAAU,EAACmC,IAAI,CAAEpC,MAAO,CAACqC,IAAI,CAAEF,CAAE,CAAC1B,OAAO,CAAEA,OAAQ,CAACC,EAAE,CAAEA,EAAG,CAAAsB,QAAA,CACvDG,CAAC,EAD4DA,CAEtD,CAAC,CAAE,CAGnB,CAAC,EAEJ,CAAC,CAId","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}