{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\giada\\\\OneDrive\\\\Desktop\\\\progetto finale\\\\frontend\\\\src\\\\components\\\\uploadImage\\\\UploadImage.jsx\",\n  _s = $RefreshSig$();\nimport { createContext, useEffect, useState } from \"react\";\n\n// Crea un contesto React per gestire lo stato di caricamento dello script Cloudinary\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CloudinaryScriptContext = /*#__PURE__*/createContext();\nfunction UploadImage({\n  uwConfig,\n  setState\n}) {\n  _s();\n  // Per tracciare se lo script Cloudinary è stato caricato\n  const [loaded, setLoaded] = useState(false);\n\n  // Per gestire il caricamento dello script Cloudinary\n  useEffect(() => {\n    // Controlla se lo script non è stato ancora caricato\n    if (!loaded) {\n      const uwScript = document.getElementById(\"uw\");\n      if (!uwScript) {\n        // Se lo script non è presente nel DOM, lo creo e lo aggiungo\n        const script = document.createElement(\"script\");\n        script.setAttribute(\"async\", \"\");\n        script.setAttribute(\"id\", \"uw\");\n        script.src = \"https://upload-widget.cloudinary.com/global/all.js\";\n        // Aggiorno lo stato quando lo script è caricato\n        script.addEventListener(\"load\", () => setLoaded(true));\n        document.body.appendChild(script);\n      } else {\n        // Altrimenti aggiorno lo stato\n        setLoaded(true);\n      }\n    }\n  }, [loaded]);\n\n  // Funzione per inizializzare il widget Cloudinary quando lo script è caricato\n  const initializeCloudinaryWidget = () => {\n    if (loaded) {\n      var myWidget = window.cloudinary.createUploadWidget(uwConfig, (error, result) => {\n        // Callback per gestire il risultato dell'upload\n        if (!error && result && result.event === \"success\") {\n          console.log(\"Immagine caricata! Ecco le sue info: \", result.info);\n          // Aggiorna lo stato con l'URL dell'immagine caricata\n          setState(prev => [...prev, result.info.secure_url]);\n        }\n      });\n\n      // Aggiunge un listener al bottone per aprire il widget di upload\n      document.getElementById(\"upload_widget\").addEventListener(\"click\", function () {\n        myWidget.open();\n      }, false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(CloudinaryScriptContext.Provider, {\n    value: {\n      loaded\n    },\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"upload_widget\",\n      className: \"cloudinary-button\",\n      onClick: initializeCloudinaryWidget,\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"/upload_2.png\",\n        alt: \"\",\n        className: \"upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), \"Carica immagini\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n}\n_s(UploadImage, \"I8RUn14npbk54TheiKdNt4wCpsU=\");\n_c = UploadImage;\nexport default UploadImage;\nexport { CloudinaryScriptContext };\nvar _c;\n$RefreshReg$(_c, \"UploadImage\");","map":{"version":3,"names":["createContext","useEffect","useState","jsxDEV","_jsxDEV","CloudinaryScriptContext","UploadImage","uwConfig","setState","_s","loaded","setLoaded","uwScript","document","getElementById","script","createElement","setAttribute","src","addEventListener","body","appendChild","initializeCloudinaryWidget","myWidget","window","cloudinary","createUploadWidget","error","result","event","console","log","info","prev","secure_url","open","Provider","value","children","id","className","onClick","alt","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/giada/OneDrive/Desktop/progetto finale/frontend/src/components/uploadImage/UploadImage.jsx"],"sourcesContent":["import { createContext, useEffect, useState } from \"react\";\r\n\r\n\r\n// Crea un contesto React per gestire lo stato di caricamento dello script Cloudinary\r\nconst CloudinaryScriptContext = createContext();\r\n\r\nfunction UploadImage({ uwConfig, setState }) {\r\n\r\n    // Per tracciare se lo script Cloudinary è stato caricato\r\n    const [loaded, setLoaded] = useState(false);\r\n\r\n    // Per gestire il caricamento dello script Cloudinary\r\n    useEffect(() => {\r\n        \r\n        // Controlla se lo script non è stato ancora caricato\r\n        if (!loaded) {\r\n            const uwScript = document.getElementById(\"uw\");\r\n            if (!uwScript) {\r\n                // Se lo script non è presente nel DOM, lo creo e lo aggiungo\r\n                const script = document.createElement(\"script\");\r\n                script.setAttribute(\"async\", \"\");\r\n                script.setAttribute(\"id\", \"uw\");\r\n                script.src = \"https://upload-widget.cloudinary.com/global/all.js\";\r\n                // Aggiorno lo stato quando lo script è caricato\r\n                script.addEventListener(\"load\", () => setLoaded(true));\r\n                document.body.appendChild(script);\r\n            } else {\r\n                // Altrimenti aggiorno lo stato\r\n                setLoaded(true);\r\n            }\r\n        }\r\n    }, [loaded]);\r\n\r\n    // Funzione per inizializzare il widget Cloudinary quando lo script è caricato\r\n    const initializeCloudinaryWidget = () => {\r\n        if (loaded) {\r\n            var myWidget = window.cloudinary.createUploadWidget(\r\n                uwConfig,\r\n                (error, result) => {\r\n                    // Callback per gestire il risultato dell'upload\r\n                    if (!error && result && result.event === \"success\") {\r\n                        console.log(\"Immagine caricata! Ecco le sue info: \", result.info);\r\n                        // Aggiorna lo stato con l'URL dell'immagine caricata\r\n                        setState((prev) => [...prev, result.info.secure_url]);\r\n                    }\r\n                }\r\n            );\r\n\r\n            // Aggiunge un listener al bottone per aprire il widget di upload\r\n            document.getElementById(\"upload_widget\").addEventListener(\r\n                \"click\",\r\n                function () {\r\n                    myWidget.open();\r\n                },\r\n                false\r\n            );\r\n        }\r\n    };\r\n\r\n    return (\r\n\r\n        <CloudinaryScriptContext.Provider value={{ loaded }}>\r\n            <button\r\n                id=\"upload_widget\"\r\n                className=\"cloudinary-button\"\r\n                onClick={initializeCloudinaryWidget}\r\n            >\r\n                <img src=\"/upload_2.png\" alt=\"\" className=\"upload\"/>\r\n                Carica immagini\r\n            </button>\r\n        </CloudinaryScriptContext.Provider>\r\n    );\r\n}\r\n\r\nexport default UploadImage;\r\nexport { CloudinaryScriptContext };"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;;AAG1D;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,uBAAuB,gBAAGL,aAAa,CAAC,CAAC;AAE/C,SAASM,WAAWA,CAAC;EAAEC,QAAQ;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EAEzC;EACA,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;;EAE3C;EACAD,SAAS,CAAC,MAAM;IAEZ;IACA,IAAI,CAACS,MAAM,EAAE;MACT,MAAME,QAAQ,GAAGC,QAAQ,CAACC,cAAc,CAAC,IAAI,CAAC;MAC9C,IAAI,CAACF,QAAQ,EAAE;QACX;QACA,MAAMG,MAAM,GAAGF,QAAQ,CAACG,aAAa,CAAC,QAAQ,CAAC;QAC/CD,MAAM,CAACE,YAAY,CAAC,OAAO,EAAE,EAAE,CAAC;QAChCF,MAAM,CAACE,YAAY,CAAC,IAAI,EAAE,IAAI,CAAC;QAC/BF,MAAM,CAACG,GAAG,GAAG,oDAAoD;QACjE;QACAH,MAAM,CAACI,gBAAgB,CAAC,MAAM,EAAE,MAAMR,SAAS,CAAC,IAAI,CAAC,CAAC;QACtDE,QAAQ,CAACO,IAAI,CAACC,WAAW,CAACN,MAAM,CAAC;MACrC,CAAC,MAAM;QACH;QACAJ,SAAS,CAAC,IAAI,CAAC;MACnB;IACJ;EACJ,CAAC,EAAE,CAACD,MAAM,CAAC,CAAC;;EAEZ;EACA,MAAMY,0BAA0B,GAAGA,CAAA,KAAM;IACrC,IAAIZ,MAAM,EAAE;MACR,IAAIa,QAAQ,GAAGC,MAAM,CAACC,UAAU,CAACC,kBAAkB,CAC/CnB,QAAQ,EACR,CAACoB,KAAK,EAAEC,MAAM,KAAK;QACf;QACA,IAAI,CAACD,KAAK,IAAIC,MAAM,IAAIA,MAAM,CAACC,KAAK,KAAK,SAAS,EAAE;UAChDC,OAAO,CAACC,GAAG,CAAC,uCAAuC,EAAEH,MAAM,CAACI,IAAI,CAAC;UACjE;UACAxB,QAAQ,CAAEyB,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAEL,MAAM,CAACI,IAAI,CAACE,UAAU,CAAC,CAAC;QACzD;MACJ,CACJ,CAAC;;MAED;MACArB,QAAQ,CAACC,cAAc,CAAC,eAAe,CAAC,CAACK,gBAAgB,CACrD,OAAO,EACP,YAAY;QACRI,QAAQ,CAACY,IAAI,CAAC,CAAC;MACnB,CAAC,EACD,KACJ,CAAC;IACL;EACJ,CAAC;EAED,oBAEI/B,OAAA,CAACC,uBAAuB,CAAC+B,QAAQ;IAACC,KAAK,EAAE;MAAE3B;IAAO,CAAE;IAAA4B,QAAA,eAChDlC,OAAA;MACImC,EAAE,EAAC,eAAe;MAClBC,SAAS,EAAC,mBAAmB;MAC7BC,OAAO,EAAEnB,0BAA2B;MAAAgB,QAAA,gBAEpClC,OAAA;QAAKc,GAAG,EAAC,eAAe;QAACwB,GAAG,EAAC,EAAE;QAACF,SAAS,EAAC;MAAQ;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC,mBAExD;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACqB,CAAC;AAE3C;AAACrC,EAAA,CAlEQH,WAAW;AAAAyC,EAAA,GAAXzC,WAAW;AAoEpB,eAAeA,WAAW;AAC1B,SAASD,uBAAuB;AAAG,IAAA0C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}